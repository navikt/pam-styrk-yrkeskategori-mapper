// pam-styrk-yrkeskategori-mapper create release

githubAppId = '23179'
githubAppCredentialId = 'teampam-ci'
def newAppToken() {
    withEnv(['HTTPS_PROXY=webproxy-internett.nav.no:8088']) {
        withCredentials([file(credentialsId: githubAppCredentialId, variable: 'KEYFILE')]) {
            dir('token') {
                def generatedToken = sh(script: "generate-jwt.sh \$KEYFILE ${githubAppId} | xargs generate-installation-token.sh", returnStdout: true)
                return generatedToken.trim()
            }
        }
    }
}

node {
    def application = "pam-styrk-yrkeskategori-mapper"
    def repo = "navikt"
    def githubAppToken = newAppToken()

    def committer, committerEmail, changelog, pom, releaseVersion, majorVersion, minorVersion, newMinorVersion, newSnapshotVersion, isSnapshot, nextVersion // metadata

    def mvnHome = tool "maven-3.3.9"
    def mvn = "${mvnHome}/bin/mvn"

    def color

    try {

        stage("Checkout") {
            cleanWs()
            withEnv(['HTTPS_PROXY=http://webproxy-internett.nav.no:8088']) {
               println("Repository URL is https://x-access-token:****@github.com/${repo}/${application}.git")
               sh(script: "set +x; git clone https://x-access-token:${githubAppToken}@github.com/${repo}/${application}.git .")
            }
        }

        stage("Initialize") {
            pom = readMavenPom file: 'pom.xml'
            releaseVersion = pom.version.tokenize("-")[0]
            majorVersion = releaseVersion.tokenize(".")[0]
            minorVersion = releaseVersion.tokenize(".")[1]
            newMinorVersion = minorVersion.toInteger() + 1
            newSnapshotVersion = "${majorVersion}.${newMinorVersion}-SNAPSHOT"
            isSnapshot = pom.version.contains("-SNAPSHOT")
            committer = sh(script: 'git log -1 --pretty=format:"%an (%ae)"', returnStdout: true).trim()
            committerEmail = sh(script: 'git log -1 --pretty=format:"%ae"', returnStdout: true).trim()
            changelog = sh(script: 'git log `git describe --tags --abbrev=0`..HEAD --oneline', returnStdout: true)
        }

        stage("Verify maven versions") {
            sh 'echo "Verifying that no snapshot dependencies is being used."'
            sh 'grep module pom.xml | cut -d">" -f2 | cut -d"<" -f1 > snapshots.txt'
            sh 'echo "./" >> snapshots.txt'
            sh 'while read line;do if [ "$line" != "" ];then if [ `grep SNAPSHOT $line/pom.xml | wc -l` -gt 1 ];then echo "SNAPSHOT-dependencies found. See file $line/pom.xml.";exit 1;fi;fi;done < snapshots.txt'
        }

        stage("Set release version") {
            withEnv(['HTTPS_PROXY=http://webproxy-internett.nav.no:8088']) {
                sh "${mvn} versions:set -B -DnewVersion=${releaseVersion} -DgenerateBackupPoms=false"
                sh "git commit -am \"set version to ${releaseVersion} (from Jenkins pipeline)\""
                sh "git push -q origin"
                sh "git tag -a ${application}-${releaseVersion} -m ${application}-${releaseVersion}"
                sh "git push -q --tags origin"
            }
        }

        stage("Build and test backend") {
            sh "${mvn} clean install -Dit.skip=true -Djava.io.tmpdir=/tmp/${application} -B -e"
       }

        stage("Publish artifact") {
            withCredentials([usernamePassword(credentialsId: 'deployer', usernameVariable: 'DEP_USERNAME', passwordVariable: 'DEP_PASSWORD')]) {
                    sh "${mvn} clean deploy -Dusername=${env.DEP_USERNAME} -Dpassword=${env.DEP_PASSWORD} -DskipTests -B -e"
            }
        }

        stage("Set new snapshot-version") {
            withEnv(['HTTPS_PROXY=http://webproxy-internett.nav.no:8088']) {
                sh "${mvn} versions:set -B -DnewVersion=${newSnapshotVersion} -DgenerateBackupPoms=false"
                sh "git commit -am \"set version to ${newSnapshotVersion} (from Jenkins pipeline)\""
                sh "git push -q origin"
                sh "git tag -a ${application}-${newSnapshotVersion} -m ${application}-${newSnapshotVersion}"
                sh "git push -q --tags origin"
            }
        }

        color = '#BDFFC3'
        GString message = ":heart_eyes_cat: Siste commit på ${application} bygd og deploya OK.\nSiste commit ${changelog}"
        slackSend color: color, channel: '#pam_bygg', message: message, teamDomain: 'nav-it', tokenCredentialId: 'pam-slack'


    } catch (e) {
        color = '#FF0004'
        GString message = ":crying_cat_face: :crying_cat_face: :crying_cat_face: :crying_cat_face: :crying_cat_face: :crying_cat_face: Halp sad cat! \n Siste commit på ${application} gikk ikkje gjennom. Sjå logg for meir info ${env.BUILD_URL}\nLast commit ${changelog}"
        slackSend color: color, channel: '#pam_bygg', message: message, teamDomain: 'nav-it', tokenCredentialId: 'pam-slack'
    }

}
